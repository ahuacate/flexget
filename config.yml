### Ahuacate Flexget Recipe ###

variables: secrets.yml

templates:
  global:
    deluge:
      username: '{? deluge.username ?}'
      password: '{? deluge.password ?}'
      host: '{? deluge.host ?}'
      port: '{? deluge.port ?}'
    # Make there's 50GB free before adding more downloads
    free_space:
      path: '{? storage.documentary ?}'
      space: 50000
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    # Limit the frequency of requests to domains so they don't complain about using a bot
    domain_delay:
      showrss.info: 1 seconds
    # TorrentLeech uses cloudflare anti-bot measures, bypass those
    cfscraper: yes
  global-filter:
    # Most of these are the results of problem torrents I kept seeing still pop up, so I wholesale blocked them
    # RegExr (http://www.gskinner.com/RegExr/) is a great tool for testing regexes
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}
        - the.day.of.the.doctor                               # The following are titles that caused me issues from plugins
    # Require at least 5 seeds of any torrent
    torrent_alive:
      min_seeds: 5
      reject_for: 1 day
    # Filter by filenames. Allow multiple video types and rar packs (but note if there is just a
    # single .rar file it won't be accepted)
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject:
        - 'password.txt'
        - '*.wmv'
    sort_by:
      - field: quality
        reverse: yes
      - field: torrent_availability
        reverse: yes

  series-filter:
    template: [global-filter]
    if:
      - season_pack:
          content_size:
            min: 200
      - not season_pack:
          content_size:
            max: 10000
            min: 200
            strict: no
    # content_size:
      # max: 15000
      # min: 200
      # strict: no
    timeframe:
      wait: 2 hours
      target: 1080p
      wait: 2 hours
    quality: 720p+
    # Prevent from downloading shows that were aquired manually or are currently downloading
    exists_series:
      - "{? storage.documentary ?}/series/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '')|pathscrub('windows') }}"
    set:
      move_completed_path: '{? storage.downloads ?}/complete/flexget/series'
      main_file_only: yes
      keep_subs: yes
      label: 'flexget-series'
      queue_to_top: yes
      remove_at_ratio: 1.5

  feed-showrss:
    rss: 
      url: "{? rssfeeds.showrss01 ?}"
    no_entries_ok: yes
    all_series: yes
    seen: local
    thetvdb_lookup: yes
    series:
      include:
        - list-showrss.yml

  feed-mvgroup:
    rss: 
      url: "{? rssfeeds.mvgroup01 ?}"
      all_entries: yes
    no_entries_ok: yes
    # all_series: yes
    seen: local
    include:
      - list-mvgroup.yml
      
  feed-documentarytorrents:
    rss: 
      url: "{? rssfeeds.documentarytorrents01 ?}"
      all_entries: yes
    no_entries_ok: yes
    seen: local
    include:
      - list-documentarytorrents.yml
    
tasks:

  download-feed-showrss:
    priority: 10
    template:
      - feed-showrss
      - series-filter     

  download-feed-mvgroup:
    priority: 20
    template:
      - feed-mvgroup
      - series-filter

  download-feed-documentarytorrents:
    priority: 30
    template:
      - feed-documentarytorrents
      - series-filter         

  cleanup-torrents:
    priority: 100
    from_deluge:
      username: '{? deluge.username ?}'
      password: '{? deluge.password ?}'
      host: '{? deluge.host ?}'
      port: '{? deluge.port ?}'
    disable: [seen, seen_info_hash]
    if:
      - deluge_label == flexget-series: accept
      - deluge_progress == 100: accept
      - deluge_ratio < 1.5: reject
    deluge:
      action: purge

  remove-old-series:
    priority: 110
    # Purges media content older than 'X' days (-ctime +X)
    exec:
      on_exit:
        phase: "find /mnt/video/documentary/series/ -mindepth 1 -ctime +15 -delete"

  remove-old-movies:
    priority: 120
    # Purges media content older than 'X' days (-ctime +X)
    exec:
      on_exit:
        phase: "find /mnt/video/documentary/movies/ -mindepth 1 -ctime +30 -delete"

schedules:
  - tasks: 'download-feed-showrss'
    interval:
      minutes: 30
  - tasks: ['download-feed-mvgroup', 'download-feed-documentarytorrents']
    interval:
      hours: 12
  - tasks: ['cleanup-*']
    interval:
      hours: 12
  - tasks: ['remove-old-*']
    interval:
      hours: 24

# web_server:
  # run_v2: yes
